{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbsorberInstance = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Vector_1 = require(\"../../Core/Particle/Vector\");\n\nconst Enums_1 = require(\"../../Enums\");\n\nclass AbsorberInstance {\n  constructor(absorbers, container, options, position) {\n    var _a, _b, _c, _d, _e;\n\n    this.absorbers = absorbers;\n    this.container = container;\n    this.initialPosition = position ? Vector_1.Vector.create(position.x, position.y) : undefined;\n    this.options = options;\n    this.dragging = false;\n    this.name = this.options.name;\n    this.opacity = this.options.opacity;\n    this.size = (0, Utils_1.getRangeValue)(options.size.value) * container.retina.pixelRatio;\n    this.mass = this.size * options.size.density * container.retina.reduceFactor;\n    const limit = options.size.limit;\n    this.limit = typeof limit === \"number\" ? {\n      radius: limit * container.retina.pixelRatio * container.retina.reduceFactor,\n      mass: 0\n    } : {\n      radius: ((_a = limit === null || limit === void 0 ? void 0 : limit.radius) !== null && _a !== void 0 ? _a : 0) * container.retina.pixelRatio * container.retina.reduceFactor,\n      mass: (_b = limit === null || limit === void 0 ? void 0 : limit.mass) !== null && _b !== void 0 ? _b : 0\n    };\n    const color = typeof options.color === \"string\" ? {\n      value: options.color\n    } : options.color;\n    this.color = (_c = (0, Utils_1.colorToRgb)(color)) !== null && _c !== void 0 ? _c : {\n      b: 0,\n      g: 0,\n      r: 0\n    };\n    this.position = (_e = (_d = this.initialPosition) === null || _d === void 0 ? void 0 : _d.copy()) !== null && _e !== void 0 ? _e : this.calcPosition();\n  }\n\n  attract(particle) {\n    const container = this.container;\n    const options = this.options;\n\n    if (options.draggable) {\n      const mouse = container.interactivity.mouse;\n\n      if (mouse.clicking && mouse.downPosition) {\n        const mouseDist = (0, Utils_1.getDistance)(this.position, mouse.downPosition);\n\n        if (mouseDist <= this.size) {\n          this.dragging = true;\n        }\n      } else {\n        this.dragging = false;\n      }\n\n      if (this.dragging && mouse.position) {\n        this.position.x = mouse.position.x;\n        this.position.y = mouse.position.y;\n      }\n    }\n\n    const pos = particle.getPosition();\n    const {\n      dx,\n      dy,\n      distance\n    } = (0, Utils_1.getDistances)(this.position, pos);\n    const v = Vector_1.Vector.create(dx, dy);\n    v.length = this.mass / Math.pow(distance, 2) * container.retina.reduceFactor;\n\n    if (distance < this.size + particle.getRadius()) {\n      const sizeFactor = particle.getRadius() * 0.033 * container.retina.pixelRatio;\n\n      if (this.size > particle.getRadius() && distance < this.size - particle.getRadius() || particle.absorberOrbit !== undefined && particle.absorberOrbit.length < 0) {\n        if (options.destroy) {\n          particle.destroy();\n        } else {\n          particle.needsNewPosition = true;\n          this.updateParticlePosition(particle, v);\n        }\n      } else {\n        if (options.destroy) {\n          particle.size.value -= sizeFactor;\n        }\n\n        this.updateParticlePosition(particle, v);\n      }\n\n      if (this.limit.radius <= 0 || this.size < this.limit.radius) {\n        this.size += sizeFactor;\n      }\n\n      if (this.limit.mass <= 0 || this.mass < this.limit.mass) {\n        this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n      }\n    } else {\n      this.updateParticlePosition(particle, v);\n    }\n  }\n\n  resize() {\n    const initialPosition = this.initialPosition;\n    this.position = initialPosition && (0, Utils_1.isPointInside)(initialPosition, this.container.canvas.size) ? initialPosition : this.calcPosition();\n  }\n\n  draw(context) {\n    context.translate(this.position.x, this.position.y);\n    context.beginPath();\n    context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n    context.closePath();\n    context.fillStyle = (0, Utils_1.getStyleFromRgb)(this.color, this.opacity);\n    context.fill();\n  }\n\n  calcPosition() {\n    var _a, _b;\n\n    const container = this.container;\n    const percentPosition = this.options.position;\n    return Vector_1.Vector.create(((_a = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.x) !== null && _a !== void 0 ? _a : Math.random() * 100) / 100 * container.canvas.size.width, ((_b = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.y) !== null && _b !== void 0 ? _b : Math.random() * 100) / 100 * container.canvas.size.height);\n  }\n\n  updateParticlePosition(particle, v) {\n    var _a;\n\n    if (particle.destroyed) {\n      return;\n    }\n\n    const container = this.container;\n    const canvasSize = container.canvas.size;\n\n    if (particle.needsNewPosition) {\n      particle.position.x = Math.floor(Math.random() * canvasSize.width);\n      particle.position.y = Math.floor(Math.random() * canvasSize.height);\n      particle.velocity.setTo(particle.initialVelocity);\n      particle.absorberOrbit = undefined;\n      particle.needsNewPosition = false;\n    }\n\n    if (this.options.orbits) {\n      if (particle.absorberOrbit === undefined) {\n        particle.absorberOrbit = Vector_1.Vector.create(0, 0);\n        particle.absorberOrbit.length = (0, Utils_1.getDistance)(particle.getPosition(), this.position);\n        particle.absorberOrbit.angle = Math.random() * Math.PI * 2;\n      }\n\n      if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n        const minSize = Math.min(canvasSize.width, canvasSize.height);\n        particle.absorberOrbit.length = minSize * (1 + (Math.random() * 0.2 - 0.1));\n      }\n\n      if (particle.absorberOrbitDirection === undefined) {\n        particle.absorberOrbitDirection = particle.velocity.x >= 0 ? Enums_1.RotateDirection.clockwise : Enums_1.RotateDirection.counterClockwise;\n      }\n\n      const orbitRadius = particle.absorberOrbit.length;\n      const orbitAngle = particle.absorberOrbit.angle;\n      const orbitDirection = particle.absorberOrbitDirection;\n      particle.velocity.x = 0;\n      particle.velocity.y = 0;\n      const updateFunc = {\n        x: orbitDirection === Enums_1.RotateDirection.clockwise ? Math.cos : Math.sin,\n        y: orbitDirection === Enums_1.RotateDirection.clockwise ? Math.sin : Math.cos\n      };\n      particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n      particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n      particle.absorberOrbit.length -= v.length;\n      particle.absorberOrbit.angle += ((_a = particle.retina.moveSpeed) !== null && _a !== void 0 ? _a : 0) * container.retina.pixelRatio / 100 * container.retina.reduceFactor;\n    } else {\n      const addV = Vector_1.Vector.origin;\n      addV.length = v.length;\n      addV.angle = v.angle;\n      particle.velocity.addTo(addV);\n    }\n  }\n\n}\n\nexports.AbsorberInstance = AbsorberInstance;","map":{"version":3,"sources":["/Users/shahansha/Desktop/health HighWay/Priyaka_PORfolio/wokring portfolio-react-main 2 2/node_modules/tsparticles/Plugins/Absorbers/AbsorberInstance.js"],"names":["Object","defineProperty","exports","value","AbsorberInstance","Utils_1","require","Vector_1","Enums_1","constructor","absorbers","container","options","position","_a","_b","_c","_d","_e","initialPosition","Vector","create","x","y","undefined","dragging","name","opacity","size","getRangeValue","retina","pixelRatio","mass","density","reduceFactor","limit","radius","color","colorToRgb","b","g","r","copy","calcPosition","attract","particle","draggable","mouse","interactivity","clicking","downPosition","mouseDist","getDistance","pos","getPosition","dx","dy","distance","getDistances","v","length","Math","pow","getRadius","sizeFactor","absorberOrbit","destroy","needsNewPosition","updateParticlePosition","resize","isPointInside","canvas","draw","context","translate","beginPath","arc","PI","closePath","fillStyle","getStyleFromRgb","fill","percentPosition","random","width","height","destroyed","canvasSize","floor","velocity","setTo","initialVelocity","orbits","angle","minSize","min","absorberOrbitDirection","RotateDirection","clockwise","counterClockwise","orbitRadius","orbitAngle","orbitDirection","updateFunc","cos","sin","moveSpeed","addV","origin","addTo"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AbsorberInstance = void 0;\nconst Utils_1 = require(\"../../Utils\");\nconst Vector_1 = require(\"../../Core/Particle/Vector\");\nconst Enums_1 = require(\"../../Enums\");\nclass AbsorberInstance {\n    constructor(absorbers, container, options, position) {\n        var _a, _b, _c, _d, _e;\n        this.absorbers = absorbers;\n        this.container = container;\n        this.initialPosition = position ? Vector_1.Vector.create(position.x, position.y) : undefined;\n        this.options = options;\n        this.dragging = false;\n        this.name = this.options.name;\n        this.opacity = this.options.opacity;\n        this.size = (0, Utils_1.getRangeValue)(options.size.value) * container.retina.pixelRatio;\n        this.mass = this.size * options.size.density * container.retina.reduceFactor;\n        const limit = options.size.limit;\n        this.limit =\n            typeof limit === \"number\"\n                ? {\n                    radius: limit * container.retina.pixelRatio * container.retina.reduceFactor,\n                    mass: 0,\n                }\n                : {\n                    radius: ((_a = limit === null || limit === void 0 ? void 0 : limit.radius) !== null && _a !== void 0 ? _a : 0) * container.retina.pixelRatio * container.retina.reduceFactor,\n                    mass: (_b = limit === null || limit === void 0 ? void 0 : limit.mass) !== null && _b !== void 0 ? _b : 0,\n                };\n        const color = typeof options.color === \"string\" ? { value: options.color } : options.color;\n        this.color = (_c = (0, Utils_1.colorToRgb)(color)) !== null && _c !== void 0 ? _c : {\n            b: 0,\n            g: 0,\n            r: 0,\n        };\n        this.position = (_e = (_d = this.initialPosition) === null || _d === void 0 ? void 0 : _d.copy()) !== null && _e !== void 0 ? _e : this.calcPosition();\n    }\n    attract(particle) {\n        const container = this.container;\n        const options = this.options;\n        if (options.draggable) {\n            const mouse = container.interactivity.mouse;\n            if (mouse.clicking && mouse.downPosition) {\n                const mouseDist = (0, Utils_1.getDistance)(this.position, mouse.downPosition);\n                if (mouseDist <= this.size) {\n                    this.dragging = true;\n                }\n            }\n            else {\n                this.dragging = false;\n            }\n            if (this.dragging && mouse.position) {\n                this.position.x = mouse.position.x;\n                this.position.y = mouse.position.y;\n            }\n        }\n        const pos = particle.getPosition();\n        const { dx, dy, distance } = (0, Utils_1.getDistances)(this.position, pos);\n        const v = Vector_1.Vector.create(dx, dy);\n        v.length = (this.mass / Math.pow(distance, 2)) * container.retina.reduceFactor;\n        if (distance < this.size + particle.getRadius()) {\n            const sizeFactor = particle.getRadius() * 0.033 * container.retina.pixelRatio;\n            if ((this.size > particle.getRadius() && distance < this.size - particle.getRadius()) ||\n                (particle.absorberOrbit !== undefined && particle.absorberOrbit.length < 0)) {\n                if (options.destroy) {\n                    particle.destroy();\n                }\n                else {\n                    particle.needsNewPosition = true;\n                    this.updateParticlePosition(particle, v);\n                }\n            }\n            else {\n                if (options.destroy) {\n                    particle.size.value -= sizeFactor;\n                }\n                this.updateParticlePosition(particle, v);\n            }\n            if (this.limit.radius <= 0 || this.size < this.limit.radius) {\n                this.size += sizeFactor;\n            }\n            if (this.limit.mass <= 0 || this.mass < this.limit.mass) {\n                this.mass += sizeFactor * this.options.size.density * container.retina.reduceFactor;\n            }\n        }\n        else {\n            this.updateParticlePosition(particle, v);\n        }\n    }\n    resize() {\n        const initialPosition = this.initialPosition;\n        this.position =\n            initialPosition && (0, Utils_1.isPointInside)(initialPosition, this.container.canvas.size)\n                ? initialPosition\n                : this.calcPosition();\n    }\n    draw(context) {\n        context.translate(this.position.x, this.position.y);\n        context.beginPath();\n        context.arc(0, 0, this.size, 0, Math.PI * 2, false);\n        context.closePath();\n        context.fillStyle = (0, Utils_1.getStyleFromRgb)(this.color, this.opacity);\n        context.fill();\n    }\n    calcPosition() {\n        var _a, _b;\n        const container = this.container;\n        const percentPosition = this.options.position;\n        return Vector_1.Vector.create((((_a = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.x) !== null && _a !== void 0 ? _a : Math.random() * 100) / 100) * container.canvas.size.width, (((_b = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.y) !== null && _b !== void 0 ? _b : Math.random() * 100) / 100) * container.canvas.size.height);\n    }\n    updateParticlePosition(particle, v) {\n        var _a;\n        if (particle.destroyed) {\n            return;\n        }\n        const container = this.container;\n        const canvasSize = container.canvas.size;\n        if (particle.needsNewPosition) {\n            particle.position.x = Math.floor(Math.random() * canvasSize.width);\n            particle.position.y = Math.floor(Math.random() * canvasSize.height);\n            particle.velocity.setTo(particle.initialVelocity);\n            particle.absorberOrbit = undefined;\n            particle.needsNewPosition = false;\n        }\n        if (this.options.orbits) {\n            if (particle.absorberOrbit === undefined) {\n                particle.absorberOrbit = Vector_1.Vector.create(0, 0);\n                particle.absorberOrbit.length = (0, Utils_1.getDistance)(particle.getPosition(), this.position);\n                particle.absorberOrbit.angle = Math.random() * Math.PI * 2;\n            }\n            if (particle.absorberOrbit.length <= this.size && !this.options.destroy) {\n                const minSize = Math.min(canvasSize.width, canvasSize.height);\n                particle.absorberOrbit.length = minSize * (1 + (Math.random() * 0.2 - 0.1));\n            }\n            if (particle.absorberOrbitDirection === undefined) {\n                particle.absorberOrbitDirection =\n                    particle.velocity.x >= 0 ? Enums_1.RotateDirection.clockwise : Enums_1.RotateDirection.counterClockwise;\n            }\n            const orbitRadius = particle.absorberOrbit.length;\n            const orbitAngle = particle.absorberOrbit.angle;\n            const orbitDirection = particle.absorberOrbitDirection;\n            particle.velocity.x = 0;\n            particle.velocity.y = 0;\n            const updateFunc = {\n                x: orbitDirection === Enums_1.RotateDirection.clockwise ? Math.cos : Math.sin,\n                y: orbitDirection === Enums_1.RotateDirection.clockwise ? Math.sin : Math.cos,\n            };\n            particle.position.x = this.position.x + orbitRadius * updateFunc.x(orbitAngle);\n            particle.position.y = this.position.y + orbitRadius * updateFunc.y(orbitAngle);\n            particle.absorberOrbit.length -= v.length;\n            particle.absorberOrbit.angle +=\n                ((((_a = particle.retina.moveSpeed) !== null && _a !== void 0 ? _a : 0) * container.retina.pixelRatio) / 100) *\n                    container.retina.reduceFactor;\n        }\n        else {\n            const addV = Vector_1.Vector.origin;\n            addV.length = v.length;\n            addV.angle = v.angle;\n            particle.velocity.addTo(addV);\n        }\n    }\n}\nexports.AbsorberInstance = AbsorberInstance;\n"]},"metadata":{},"sourceType":"script"}